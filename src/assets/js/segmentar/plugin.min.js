tinymce.PluginManager.add('tma_segmentar', function (editor, url) {
  var state
  var cColor

  function tma_hide_action () {
    state = !state
    editor.fire('tma_segmentarhide', {
      state: state
    })
    body = editor.getBody()

    if (state) { // Hide
      current = editor.getContent()
      tinymce.each(editor.$('span.annotation'), function (node) {
        editor.dom.remove(node, true)
      })
    } else { // Show
      if (!body) {
        $(body).html('')
      } else {
        $(body).html(current)
      }
    }
  }

  function updateColorValue (color) {
    cColor = color
  }

  function tma_toggleHide () {
    var self = this
    editor.on('tma_segmentarhide', function (e) {
      self.active(e.state)
    })
  }

  editor.addCommand('tma_cmd_hide', tma_hide_action);

  function deleteComment () {
    var selectedText = editor.selection.getContent()
    var selectedTextLength = selectedText.length
    var node = editor.selection.getNode()
    if (selectedTextLength > 0 || node.className == 'annotation') {
      if (node.className == 'annotation') {
        selectedText = node.innerHTML
      }
      deletionNode = editor.selection.getNode()
      replaceNode = deletionNode
      $(deletionNode).attr('style', '')
      editor.fire('deletecomment', {id: $(deletionNode).attr('id')})
      editor.dom.remove(replaceNode, deletionNode)
      editor.fire('change')
    } else {
      editor.windowManager.alert(' Seleccione un texto a segmentar')
    }
  }

  function addComment () {
    var annotation = ''
    var color = '#F0E465'
    var node = editor.selection.getNode()
    var nodeName = node.nodeName

    if (nodeName == 'SPAN') {
      nodeDataAnnotation = $(node).attr('data-annotation')
      nodeDataStyle = $(node).css('background-color')

      // Retrieve annotation and color
      if (nodeDataAnnotation) {
        annotation = nodeDataAnnotation
        var ctx = document.createElement('canvas').getContext('2d')
        ctx.strokeStyle = nodeDataStyle
        color = ctx.strokeStyle
      }
    }

    var selectedText = editor.selection.getContent()
    var selectedTextLength = selectedText.length

    if (selectedTextLength > 0 || node.className == 'annotation') {
      if (node.className == 'annotation') {
        selectedText = node.innerHTML
      }
      editor.windowManager.open({
        title: 'Agregar anotación', // TMA.tooltips.annotation_settings,
        body: [{
          type: 'textbox',
          name: 'annotation',
          label: 'Descripción',
          multiline: true,
          placeholder: 'Escribir una descripción del comentario'
        }, {
          type: 'buttongroup',
          name: 'annotationbg',
          label: 'Color',
          items: [{
            text: ' ',
            style: 'background-color: #0000FF',
            onclick: updateColorValue('#0000FF')
          },
          {
            text: ' ',
            style: 'background-color: #FF0000',
            onclick: updateColorValue('#FF0000')
          }]
        }, {
          type: 'listbox',
          name: 'annotationgg',
          label: 'Animacion', // TMA.settings.setting_annotation,
          values: [
          {
            text: 'flash ◘',
            value: 'flash',
            selected: true
          },
          {
            text: 'pulse',
            value: 'pulse'
          },
          {
            text: 'shake',
            value: 'shake'
          },
          {
            text: 'bounceOut',
            value: 'bounceOut'
          },
          {
            text: 'rollOut',
            value: 'rollOut'
          },
          {
            text: 'subrayar',
            value: 'subrayar'
          },
          {
            text: 'underline',
            value: 'underline'
          }]
        }],

        onsubmit: function (e) {
          if (e.data.annotation) {
            var dataAnnotation = e.data.annotation
            var color = cColor
            var anim = e.data.annotationgg
            var id = 1 + Math.floor(Math.random() * 10000)
            var segment = ''

            if (anim == 'subrayar') {
              segment = ' <span style="display: line;" id="' + id + '" data-author="' + /* TMA.author */ 'Autorx2x' + '">' + selectedText + '</span>'
            } else {
              segment = ' <span class="annotation"  style="display: inline; " id="' + id + '" data-author="' + /* TMA.author */ 'AutorXD' + '" style="background-color: ' + color + ' ">' + selectedText + '</span>'
            }
            if ($(node).attr('data-annotation')) {
              editor.dom.remove(node)
            }
            editor.selection.setContent(segment)
            editor.fire('submitcomment', {
              id,
              dataAnnotation,
              anim,
              color
            })
          } else {
            editor.windowManager.alert('Seleccione un texto a segmentar')
            return false
          }
        }
      })
    } else {
      editor.windowManager.alert('Seleccione un texto a segmentar', false)
    }
  }

  // Create annotation
  editor.addButton('tma_segmentar', {
    title: 'Crear comentario',
    image: tinyMCE.baseURL + '/img/annotation.png',
    onclick: addComment
  })

  editor.addMenuItem('tma_segmentar', {
    text: 'Crear comentario',
    image: tinyMCE.baseURL + '/img/annotation.png',
    onclick: addComment
  })

  // Delete annotation
  editor.addButton('tma_segmentardelete', {
    title: 'Eliminar comentario',
    image: tinyMCE.baseURL + '/img/annotation-delete.png',
    onclick: deleteComment
  })

  editor.addMenuItem('tma_segmentardelete', {
    text: 'Eliminar comentario',
    image: tinyMCE.baseURL + '/img/annotation-delete.png',
    onclick: deleteComment
  })

  // Hide all annotations
  editor.addButton('tma_segmentarhide', {
    title: 'Ocultar comentarios',
    image: tinyMCE.baseURL + '/img/annotation-hide.png',
    cmd: 'tma_cmd_hide',
    onPostRender: tma_toggleHide
  })
})
